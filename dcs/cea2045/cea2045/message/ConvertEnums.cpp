// =====================================================================================
// Copyright (c) 2016, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// libcea2045 ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// #########################################################################################
// Boost Software License, Version 1.0
// #########################################################################################
//
// * catch++ v1.2.1 (https://github.com/philsquared/Catch)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// #########################################################################################
// MIT Licence
// #########################################################################################
//
// * easylogging++ Copyright (c) 2017 muflihun.com
//   https://github.com/easylogging/easyloggingpp
//   https://easylogging.muflihun.com
//   https://muflihun.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
/*
 * ConvertEnums.cpp
 *
 *  Created on: Aug 24, 2015
 *      Author: dupes
 */

#include "../message/ConvertEnums.h"
#include <iostream>

#include <endian.h>

namespace cea2045 {

ConvertEnums::ConvertEnums()
{
}

//======================================================================================

ConvertEnums::~ConvertEnums()
{
}

//======================================================================================

MessageTypeCode ConvertEnums::convertMessageType(unsigned short messageType)
{
	MessageTypeCode messageTypeCode = MessageTypeCode::NONE;

	switch (be16toh(messageType))
	{
	case BASIC_MESSAGE:
		messageTypeCode = MessageTypeCode::BASIC;
		break;

	case INTERMEDIATE_MESSAGE:
		messageTypeCode = MessageTypeCode::INTERMEDIATE;
		break;

	case DATA_LINK_MESSAGE:
		messageTypeCode = MessageTypeCode::DATALINK;
		break;

	default:
		messageTypeCode = MessageTypeCode::NONE;
	}

	return messageTypeCode;
}

//======================================================================================
// Convert enumeration to strings, arrays, and other types.
LinkLayerNakCode ConvertEnums::convertLinkLayerNak(unsigned char nak)
{
	if (nak > (unsigned char)LinkLayerNakCode::REQUEST_NOT_SUPPORTED)
		return LinkLayerNakCode::RESERVED;

	return static_cast<LinkLayerNakCode>(nak);
}

//======================================================================================

DataLinkTypeCode ConvertEnums::convertDataLinkType(unsigned char dataLinkType)
{
	if (dataLinkType > (unsigned char)DataLinkTypeCode::SEND_NEXT_COMMAND_TO_SLOT)
		return DataLinkTypeCode::INVALID;

	return static_cast<DataLinkTypeCode>(dataLinkType);
}

//======================================================================================

MaxPayloadLengthCode ConvertEnums::convertMaxPayloadLength(unsigned char maxPayloadLength)
{
	if (maxPayloadLength > (unsigned char)MaxPayloadLengthCode::LENGTH4096)
		return MaxPayloadLengthCode::INVALID;

	return static_cast<MaxPayloadLengthCode>(maxPayloadLength);
}

//======================================================================================

// IntermediateTypeCode ConvertEnums::convertIntermediateType(unsigned short intermediateType)
// {

// 	std::cout << "Converting intermediate type: 0x" << std::hex << intermediateType << std::endl;
//     // Convert to host byte order first
//     intermediateType = be16toh(intermediateType);

//     switch (intermediateType)
//     {
//         case 0x0101:
//             return IntermediateTypeCode::INFO_REQUEST;
//         case 0x0181:
//             return IntermediateTypeCode::INFO_RESPONSE;
//         case 0x0200:
//             return IntermediateTypeCode::GET_UTC_TIME_REQUEST;
//         case 0x0600:
//             return IntermediateTypeCode::COMMODITY_REQUEST;
//         case 0x0680:
//             return IntermediateTypeCode::COMMODITY_RESPONSE;
//         case 0x0380:
//             return IntermediateTypeCode::SET_ENERGY_PRICE_RESPONSE;
//         case 0x0302:
//             return IntermediateTypeCode::GET_SET_TEMPERATURE_OFFSET_REQUEST;
//         case 0x0382:
//             return IntermediateTypeCode::GET_SET_TEMPERATURE_OFFSET_RESPONSE;
//         case 0x0383:
//             return IntermediateTypeCode::GET_SET_SETPOINT_RESPONSE;
//         case 0x0384:
//             return IntermediateTypeCode::GET_PRESENT_TEMPERATURE_RESPONSE;
//         case 0x0480:
//             return IntermediateTypeCode::START_CYCLING_RESPONSE;
//         case 0x0481:
//             return IntermediateTypeCode::TERMINATE_CYCLING_RESPONSE;
//         case 0x0103: // here is the set capability bit request. Don't think order matters!
//             return IntermediateTypeCode::SET_CAPABILITY_BIT_MESSAGE;
// 		case 0x0183:  // set capability bit response
//             return IntermediateTypeCode::SET_CAPABILITY_BIT_MESSAGE;
//         default:
// 			std::cout << "No matching intermediate type for: 0x" << std::hex << intermediateType << std::endl;
//             return IntermediateTypeCode::INVALID;
//     }
// }
// }



IntermediateTypeCode ConvertEnums::convertIntermediateType(unsigned short intermediateType)
{
    std::cout << "Converting intermediate type (raw): 0x" << std::hex << intermediateType << std::endl;
    
    // Get the bytes in both orders to check
    unsigned char firstByte = (intermediateType >> 8) & 0xFF;
    unsigned char secondByte = intermediateType & 0xFF;
    
    std::cout << "  firstByte: 0x" << std::hex << (int)firstByte 
              << ", secondByte: 0x" << std::hex << (int)secondByte << std::endl;

    // Check both byte orders for Device Info Response
    if ((firstByte == 0x81 && secondByte == 0x01) ||  // as we're receiving
        (firstByte == 0x01 && secondByte == 0x81)) {  // as per spec
        return IntermediateTypeCode::INFO_RESPONSE;
    }

    // Check both byte orders for SetCapabilityBit Response
    if ((firstByte == 0x83 && secondByte == 0x01) ||
        (firstByte == 0x01 && secondByte == 0x83)) {
        return IntermediateTypeCode::SET_CAPABILITY_BIT_MESSAGE;
    }

    // Check both byte orders for SetCapabilityBit Request
    if ((firstByte == 0x03 && secondByte == 0x01) ||
        (firstByte == 0x01 && secondByte == 0x03)) {
        return IntermediateTypeCode::SET_CAPABILITY_BIT_MESSAGE;
    }

    std::cout << "No matching intermediate type for bytes: 0x" 
              << std::hex << (int)firstByte << ", 0x" << (int)secondByte << std::endl;
    return IntermediateTypeCode::INVALID;
}
// IntermediateTypeCode ConvertEnums::convertIntermediateType(unsigned short intermediateType)
// {
//     std::cout << "Converting intermediate type (raw): 0x" << std::hex << intermediateType << std::endl;
    
//     unsigned char opCode2 = (intermediateType >> 8) & 0xFF;
//     unsigned char opCode1 = intermediateType & 0xFF;


    
//     std::cout << "  opCode1: 0x" << std::hex << (int)opCode1 
//               << ", opCode2: 0x" << std::hex << (int)opCode2 << std::endl;

//     // For SetCapabilityBit response, opCode1 = 0x83, opCode2 = 0x01
//     if (opCode1 == 0x83 && opCode2 == 0x01) {
//         return IntermediateTypeCode::SET_CAPABILITY_BIT_MESSAGE;
//     }
    
//     // For SetCapabilityBit request, opCode1 = 0x01, opCode2 = 0x03
//     if (opCode1 == 0x01 && opCode2 == 0x03) {
//         return IntermediateTypeCode::SET_CAPABILITY_BIT_MESSAGE;
//     }
	
// 	if (opCode1 == 0x81 && opCode2 == 0x01) {
//         return IntermediateTypeCode::INFO_RESPONSE;
//     }

//     std::cout << "No matching intermediate type" << std::endl;
//     return IntermediateTypeCode::INVALID;
// }
}