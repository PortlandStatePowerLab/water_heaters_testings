// =====================================================================================
// Copyright (c) 2016, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// libcea2045 ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// #########################################################################################
// Boost Software License, Version 1.0
// #########################################################################################
//
// * catch++ v1.2.1 (https://github.com/philsquared/Catch)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// #########################################################################################
// MIT Licence
// #########################################################################################
//
// * easylogging++ Copyright (c) 2017 muflihun.com
//   https://github.com/easylogging/easyloggingpp
//   https://easylogging.muflihun.com
//   https://muflihun.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
/*
 * CEA2045Device.cpp
 *
 *  Created on: Mar 11, 2015
 *      Author: dupes
 */

#include "CEA2045Device.h"

using namespace std;

namespace cea2045 {

//======================================================================================

CEA2045Device::CEA2045Device(ILinkLayerComm *linkLayer, IProcessMessage *processMessage, unsigned int receiveTimeoutMS) :
	m_linkLayer(linkLayer),
	m_processMessage(processMessage),
	m_receiveTimeoutMS(receiveTimeoutMS),
	m_recvThread(NULL),
	m_shutdown(false),
	m_isRunning(false)
{
}

//======================================================================================

CEA2045Device::CEA2045Device(std::unique_ptr<ILinkLayerComm> linkLayer, std::unique_ptr<IProcessMessage> processMessage, unsigned int receiveTimeoutMS) :
	m_p_linkLayer(std::move(linkLayer)),
	m_p_processMessage(std::move(processMessage)),
	m_linkLayer(m_p_linkLayer.get()),
	m_processMessage(m_p_processMessage.get()),
	m_receiveTimeoutMS(receiveTimeoutMS),
	m_recvThread(NULL),
	m_shutdown(false),
	m_isRunning(false)
{

}

//======================================================================================

CEA2045Device::~CEA2045Device()
{
}

//======================================================================================

void CEA2045Device::processRequest(cea2045MessageHeader *messageHeader)
{
	if (messageHeader->getLength() == 0)
	{
		m_processMessage->processMessageTypeSupported(m_linkLayer, messageHeader);
	}
	else if (messageHeader->isBasicMessage())
	{
		cea2045Basic *basic = (cea2045Basic *)messageHeader;

		m_processMessage->processBasicMessage(m_linkLayer, basic);
	}
	else if (messageHeader->isDataLinkMessage())
	{
		m_processMessage->processDataLinkMessage(m_linkLayer, messageHeader);
	}
	else if (messageHeader->isIntermediateMessage())
	{
		m_processMessage->processIntermediateMessage(m_linkLayer, messageHeader);
	}
	else
	{
		// TODO: fill in callbacks for other supported types

		// TODO: what's the proper response if the message isn't supported?
		m_processMessage->processInvalidMessage(m_linkLayer, messageHeader);
	}
}

//======================================================================================

void CEA2045Device::processResponse(cea2045MessageHeader *messageHeader, Message *response)
{
	if (messageHeader->isBasicMessage())
	{
		cea2045Basic *basic = (cea2045Basic *)messageHeader;

		m_processMessage->processBasicMessage(m_linkLayer, basic);
		response->setResponseCode(ResponseCode::OK);
	}
	else if (messageHeader->isDataLinkMessage())
	{
		m_processMessage->processDataLinkMessage(m_linkLayer, messageHeader);
		response->setResponseCode(ResponseCode::OK);
	}
	else if (messageHeader->isIntermediateMessage())
	{
		m_processMessage->processIntermediateMessage(m_linkLayer, messageHeader);
		response->setResponseCode(ResponseCode::OK);
	}
	else
	{
		m_processMessage->processInvalidMessage(m_linkLayer, messageHeader);
		response->setResponseCode(ResponseCode::INVALID_RESPONSE);
	}
}

//======================================================================================

bool CEA2045Device::processReceiveBuffer(ReceiveBuffer &receiveBuffer)
{
	cea2045MessageHeader *messageHeader = (cea2045MessageHeader *)receiveBuffer.getBuffer();

	if (receiveBuffer.getNumBytes() < 2)
		return false;

	// link layer ack/nak messages are only 2 bytes total (no length, no CRC, no payload)
	if (receiveBuffer.getNumBytes() == 2 && messageHeader->isLinkLayerAckNak())
	{
		// TODO: handle link layer ack/nak
		m_processMessage->processLinkLayerAckNak(m_linkLayer, messageHeader, MessageCode::NONE);

		return true;
	}

	if (receiveBuffer.getNumBytes() <= sizeof(cea2045MessageHeader))
		return false;

	// check for a complete message received
	// length does not include the message header or the 2 byte crc
	if (messageHeader->getLength() != receiveBuffer.getNumBytes() - (sizeof(cea2045MessageHeader) + 2))
	{
		return false;
	}

	// a complete message was received

	if (!Checksum::validate(receiveBuffer.getBuffer(), receiveBuffer.getNumBytes()))
	{
		m_linkLayer->sendLinkLayerNak(LinkLayerNakCode::CHECKSUM_ERROR);

		return true;
	}

	// we have a complete message with a valid crc
	processRequest(messageHeader);

	return true;
}

//======================================================================================

bool CEA2045Device::waitForResponse(Message *message)
{
	unsigned int messageTimeout = 3000;
	MSTimer messageTimer(messageTimeout);
	ReceiveBuffer receiveBuffer(4096);

	cea2045MessageHeader *messageHeader = (cea2045MessageHeader *)receiveBuffer.getBuffer();

	while (true)
	{
		unsigned long int elapsed = messageTimer.getElapsedMS();

		if (messageTimer.isExpired() || m_linkLayer->recv(receiveBuffer, messageTimeout - elapsed) == 0)
		{
			if (receiveBuffer.getNumBytes() > 0)
			{
				m_processMessage->processIncompleteMessage(m_linkLayer, receiveBuffer.getBuffer(),
						receiveBuffer.getNumBytes());
			}

			message->setResponseCode(ResponseCode::TIMEOUT);

			return false;
		}

		if (receiveBuffer.getNumBytes() >= sizeof(cea2045MessageHeader))
		{
			if (messageHeader->getLength() ==
					receiveBuffer.getNumBytes() - (sizeof(cea2045MessageHeader) + 2))
			{

				if (!Checksum::validate(receiveBuffer.getBuffer(), receiveBuffer.getNumBytes()))
				{
					m_linkLayer->sendLinkLayerNak(LinkLayerNakCode::CHECKSUM_ERROR);
					message->setResponseCode(ResponseCode::BAD_CRC);

					return false;
				}
				else
				{
					processResponse(messageHeader, message);
					return true;
				}

			}
		}

	}

}

//======================================================================================

bool CEA2045Device::waitForAck(Message *message)
{
	unsigned int ackTimeout = 200;
	MSTimer ackTimer(ackTimeout);
	ReceiveBuffer receiveBuffer(4096);

	while (true)
	{
		unsigned long int elapsed = ackTimer.getElapsedMS();

		if (ackTimer.isExpired())
		{
			message->setResponseCode(ResponseCode::NO_ACK_RECEIVED);
			return false;
		}

		if (m_linkLayer->recv(receiveBuffer, ackTimeout - elapsed) == 0)
		{
			message->setResponseCode(ResponseCode::NO_ACK_RECEIVED);
			return false;
		}

		if (receiveBuffer.getNumBytes() > 2)
		{
			message->setResponseCode(ResponseCode::NO_ACK_RECEIVED);
			return false;
		}

		if (receiveBuffer.getNumBytes() == 2)
		{
			break;
		}

	}

	cea2045MessageHeader *messageHeader = (cea2045MessageHeader *)receiveBuffer.getBuffer();

	if (!messageHeader->isLinkLayerAckNak())
	{
		message->setResponseCode(ResponseCode::NO_ACK_RECEIVED);
		return false;
	}

	m_processMessage->processLinkLayerAckNak(m_linkLayer, messageHeader, message->getMessageCode());

	if (messageHeader->isLinkLayerNak())
	{
		message->setResponseCodeNak(ConvertEnums::convertLinkLayerNak(messageHeader->msgType2));
		return false;
	}

	return true;
}

//======================================================================================

void CEA2045Device::processNextRequest()
{
	auto request = m_requestHandler.getNextRequest();

	if (request == nullptr)
		return;

	// send the request
	m_linkLayer->sendRequest(request->getBuffer(),
			request->getNumBytes());

	// wait for the ack
	if (!waitForAck(request.get()))
		return;

	// if MessageCode is message type supported, this is the final response
	if (request->getMessageCode() == MessageCode::SUPPORT_DATALINK_MESSAGES ||
			request->getMessageCode() == MessageCode::SUPPORT_INTERMEDIATE_MESSAGES)
	{
		request->setResponseCode(ResponseCode::OK);
		return;
	}

	// wait for the response
	waitForResponse(request.get());
}

//======================================================================================

void CEA2045Device::recvOne(ReceiveBuffer &receiveBuffer)
{
	int currentBytes = receiveBuffer.getNumBytes();
	int bytesRead = m_linkLayer->recv(receiveBuffer, 100);

	if (currentBytes == 0 && bytesRead > 0)
	{
		m_receiveTimer.reset();
	}

	// TODO: start a timer when the first byte is received
	// and clear the buffer if the timer expires before a complete
	// message is received
	if (bytesRead > 0)
	{
		if (processReceiveBuffer(receiveBuffer))
		{
			// a complete message was received and processed; clear the buffer
			receiveBuffer.reset();
		}
	}

	// a complete message wasn't received within the time frame
	// clear the buffer
	if (receiveBuffer.getNumBytes() > 0 && m_receiveTimer.getElapsedMS() >= m_receiveTimeoutMS)
	{
		m_processMessage->processIncompleteMessage(m_linkLayer, receiveBuffer.getBuffer(), receiveBuffer.getNumBytes());
		receiveBuffer.reset();
	}

	// no active requests and we're not processing a request from the other side
	// send the next queued request
	if (currentBytes == 0 && bytesRead == 0)
	{
		processNextRequest();

		//m_requestHandler.sendNextRequest(m_linkLayer);
		m_requestTimer.reset();
	}
}

//======================================================================================

void CEA2045Device::recv()
{
	ReceiveBuffer receiveBuffer(4096);

	while (!shuttingDown())
	{
		recvOne(receiveBuffer);
	}
}

//======================================================================================

bool CEA2045Device::start()
{
	if (m_isRunning)
		return false;

	m_isRunning = true;

	m_shutdown = false;

	m_recvThread = new thread(&CEA2045Device::recv, this);

	return true;
}

//======================================================================================

void CEA2045Device::shutDown()
{
	if (m_recvThread != NULL)
	{
		m_shutdown = true;

		m_recvThread->join();
		delete (m_recvThread);

		m_isRunning = false;

		m_recvThread = NULL;
	}
}

//======================================================================================

bool CEA2045Device::shuttingDown()
{
	return m_shutdown;
}

//======================================================================================

std::future<ResponseCodes> CEA2045Device::queueRequest(Message *request)
{
	return m_requestHandler.queueRequest(std::unique_ptr<Message>(request));
}

//======================================================================================

std::future<ResponseCodes> CEA2045Device::queryMaxPayload()
{
	return queueRequest(new QueryMaxPayload());
}

//======================================================================================

std::future<ResponseCodes> CEA2045Device::queryMessageTypeSupported(MessageCode messageCode, unsigned char messageType1, unsigned char messageType2)
{
	return queueRequest(new QueryMessageTypeSupported(messageCode, messageType1, messageType2));
}

//======================================================================================

std::future<ResponseCodes> CEA2045Device::querySuportDataLinkMessages()
{
	return queryMessageTypeSupported(MessageCode::SUPPORT_DATALINK_MESSAGES, DATALINK_MSG_TYP1, DATALINK_MSG_TYP2);
}

//======================================================================================

std::future<ResponseCodes> CEA2045Device::querySuportIntermediateMessages()
{
	return queryMessageTypeSupported(MessageCode::SUPPORT_INTERMEDIATE_MESSAGES, INTERMEDIATE_MSG_TYP1, INTERMEDIATE_MSG_TYP2);
}

} // namespace cea2045
