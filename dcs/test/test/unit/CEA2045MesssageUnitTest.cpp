// =====================================================================================
// Copyright (c) 2016, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// libcea2045 ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// #########################################################################################
// Boost Software License, Version 1.0
// #########################################################################################
//
// * catch++ v1.2.1 (https://github.com/philsquared/Catch)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// #########################################################################################
// MIT Licence
// #########################################################################################
//
// * easylogging++ Copyright (c) 2017 muflihun.com
//   https://github.com/easylogging/easyloggingpp
//   https://easylogging.muflihun.com
//   https://muflihun.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
/*
 * CEA2045MesssageUnitTest.cpp
 *
 *  Created on: Mar 10, 2015
 *      Author: dupes
 */

#include "../catch.hpp"

#include <cea2045/message/CEA2045MessageCommodityResponse.h>
#include <cea2045/message/CEA2045MessageDeviceInfoResponse.h>
#include <cea2045/message/ConvertEnums.h>

using namespace cea2045;

//===========================================================================

TEST_CASE("CommodityResponse", "CEA2045Message")
{
	unsigned char buffer[] =
	{ 0x8, 0x2, 0x0, 0x2A, 0x6, 0x80, 0x0, 0x0, 0x0, 0x0, 0x49, 0x96, 0x2, 0xD2,
			0x0, 0x2, 0x4C, 0xB0, 0x16, 0xEA, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x49, 0x96, 0x2, 0xD2, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x2, 0x4C, 0xB0, 0x16, 0xEA, 0x3, 0x21 };

	cea2045CommodityResponse *response = (cea2045CommodityResponse *)buffer;

	//
	// message type and length
	//
	REQUIRE(response->msgType1 == INTERMEDIATE_MSG_TYP1);
	REQUIRE(response->msgType2 == INTERMEDIATE_MSG_TYP2);

	REQUIRE(response->getLength() == sizeof(buffer) - 6);

	//
	// opcodes
	//
	REQUIRE(response->opCode1 == COMMODITY_READ);
	REQUIRE(response->opCode2 == OP_CODE2_REPLY);

	//
	// 3 commodity data responses
	//
	REQUIRE(response->getCommodityDataCount() == 3);

	//
	// first 3 should be valid CommodityData
	//
	REQUIRE(response->getCommodityData(0) != NULL);
	REQUIRE(response->getCommodityData(1) != NULL);
	REQUIRE(response->getCommodityData(2) != NULL);
	REQUIRE(response->getCommodityData(3) == NULL);

	//
	// commodity codes
	//
	REQUIRE(response->getCommodityData(0)->commodityCode == COMMODITY_CODE_ELECTRICITY_CONSUMED);
	REQUIRE(response->getCommodityData(1)->commodityCode == COMMODITY_CODE_TOTAL_ENERGY_STORAGE);
	REQUIRE(response->getCommodityData(2)->commodityCode == COMMODITY_CODE_PRESENT_ENERGY_STORAGE);

	//
	// cumulative and instantaneous values
	//
	REQUIRE(response->getCommodityData(0)->getCumulativeAmount() == (uint64_t)9876543210);
	REQUIRE(response->getCommodityData(0)->getInstantaneousRate() == (uint64_t)1234567890);
//	REQUIRE(response->getCommodityData(0)->getInstantaneousRate() == (unsigned long int )1234567890);

	REQUIRE(response->getCommodityData(1)->getCumulativeAmount() == (uint64_t)1234567890);
	REQUIRE(response->getCommodityData(1)->getInstantaneousRate() == (uint64_t)0);

	REQUIRE(response->getCommodityData(2)->getCumulativeAmount() == (uint64_t)9876543210);
	REQUIRE(response->getCommodityData(2)->getInstantaneousRate() == (uint64_t)0);
}

//===========================================================================

TEST_CASE("DeviceInfoResponse", "CEA2045Message")
{
	unsigned char buffer[] =
	{ 0x08, 0x02, 0x00, 0x35, 0x01, 0x81, 0x00, 0x31, 0x30, 0x44, 0x55, 0x00,
			0x00, 0x55, 0x66, 0x20, 0x21, 0x22, 0x23, 0x00, 0x30, 0x30, 0x30,
			0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
			0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
			0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x01, 0x01, 0x01, 0x00,
			0x00, 0x5B, 0xF1 };

	cea2045DeviceInfoResponse *msg = (cea2045DeviceInfoResponse *)buffer;

	REQUIRE(msg->msgType1 == INTERMEDIATE_MSG_TYP1);
	REQUIRE(msg->msgType2 == INTERMEDIATE_MSG_TYP2);
	REQUIRE(sizeof(buffer) - 6 == msg->getLength());
	REQUIRE(msg->opCode1 == DEVICE_INFO_RESPONSE_OP_CODE1);
	REQUIRE(msg->opCode2 == DEVICE_INFO_RESPONSE_OP_CODE2);
	REQUIRE(msg->responseCode == 0x00);
	REQUIRE(msg->version[0] == '1');  //0x31
	REQUIRE(msg->version[1] == '0');  //0x30
	REQUIRE(msg->vendorId == 0x5544);  // 0x44 0x55 == byte swapped
	REQUIRE(msg->deviceType == 0x0000);
	REQUIRE(msg->deviceRevision[0] == 0x55);
	REQUIRE(msg->deviceRevision[1] == 0x66);
	REQUIRE(msg->capability[0] == 0x20);
	REQUIRE(msg->capability[1] == 0x21);
	REQUIRE(msg->capability[2] == 0x22);
	REQUIRE(msg->capability[3] == 0x23);
	REQUIRE(msg->reserved1 == 0x00);

	for (unsigned int idx = 0; idx < sizeof(msg->modelNumber); idx++)
	{
		REQUIRE(msg->modelNumber[idx] == '0');  //0x30
	}

	for (unsigned int idx = 0; idx < sizeof(msg->serialNumber); idx++)
	{
		REQUIRE(msg->serialNumber[idx] == '0');  //0x30
	}

	REQUIRE(msg->firmwareYear20xx == 0x01);
	REQUIRE(msg->firmwareMonth == 0x01);
	REQUIRE(msg->firmwareDay == 0x01);
	REQUIRE(msg->firmwareMajor == 0x00);
	REQUIRE(msg->firmwareMinor == 0x00);
}

//===========================================================================

TEST_CASE("MACROS", "CEA2045Message")
{
	unsigned char buffer[] =
	{ 0x08, 0x02, 0x00, 0x35, 0x01, 0x81, 0x00, 0x31, 0x30, 0x44, 0x55, 0x00,
			0x00, 0x55, 0x66, 0x20, 0x21, 0x22, 0x23, 0x00, 0x30, 0x30, 0x30,
			0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
			0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
			0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x01, 0x01, 0x01, 0x00,
			0x00, 0x5B, 0xF1 };

	cea2045DeviceInfoResponse *msg = (cea2045DeviceInfoResponse *)buffer;

	unsigned short length = msg->getLength();
	unsigned short checksum = msg->checksum;

	msg->setLength();
	msg->setChecksum();

	REQUIRE(length == msg->getLength());
	REQUIRE(checksum == msg->checksum);
}
