// =====================================================================================
// Copyright (c) 2016, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// libcea2045 ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// #########################################################################################
// Boost Software License, Version 1.0
// #########################################################################################
//
// * catch++ v1.2.1 (https://github.com/philsquared/Catch)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// #########################################################################################
// MIT Licence
// #########################################################################################
//
// * easylogging++ Copyright (c) 2017 muflihun.com
//   https://github.com/easylogging/easyloggingpp
//   https://easylogging.muflihun.com
//   https://muflihun.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
/*
 * UCM.cpp
 *
 *  Created on: Aug 25, 2015
 *      Author: dupes
 */

#include "UCM.h"

namespace cea2045test {
namespace processmessage {

UCM::UCM()
{
	messageTypeSupportedCount = 0;
	maxPayloadCount = 0;
	payloadResponseCount = 0;
	deviceInfoResponseCount = 0;
	commodityResponseCount = 0;
	setEnergyPriceResponseCount = 0;
	setTemperatureOffsetResponseCount = 0;
	getTemperatureOffsetResponseCount = 0;
	setSetpointsResponseCount = 0;
	getSetpointsResponse1Count = 0;
	getSetpointsResponse2Count = 0;
	startCyclingResponseCount = 0;
	terminateCyclingResponseCount = 0;
	getPresentTemperatureResponseCount = 0;
	getUTCTimeResponseCount = 0;
	ackReceivedCount = 0;
	nakReceivedCount = 0;
	appAckReceivedCount = 0;
	appNakReceivedCount = 0;
	operationalStateCount = 0;

	messageType = MessageTypeCode::NONE;
}

UCM::~UCM()
{
}

bool UCM::isMessageTypeSupported(MessageTypeCode messageType)
{
	messageTypeSupportedCount++;
	this->messageType = messageType;

	if (messageType == MessageTypeCode::BASIC)
		return true;

	if (messageType == MessageTypeCode::INTERMEDIATE)
		return true;

	return false;
}

MaxPayloadLengthCode UCM::getMaxPayload()
{
	return MaxPayloadLengthCode::LENGTH4096;
}

void UCM::processMaxPayloadResponse(MaxPayloadLengthCode maxPayload)
{
	maxPayloadCount++;
}

void UCM::processDeviceInfoResponse(cea2045DeviceInfoResponse* message)
{
	deviceInfoResponseCount++;
}

void UCM::processCommodityResponse(cea2045CommodityResponse* message)
{
	commodityResponseCount++;
}

void UCM::processSetEnergyPriceResponse(cea2045IntermediateResponse *message)
{
	setEnergyPriceResponseCount++;
}

void UCM::processSetTemperatureOffsetResponse(cea2045IntermediateResponse *message)
{
	setTemperatureOffsetResponseCount++;
}

void UCM::processGetTemperatureOffsetResponse(cea2045GetTemperateOffsetResponse *message)
{
	getTemperatureOffsetResponseCount++;
}

void UCM::processSetSetpointsResponse(cea2045IntermediateResponse *message)
{
	setSetpointsResponseCount++;
}

void UCM::processGetSetpointsResponse(cea2045GetSetpointsResponse1 *message)
{
	getSetpointsResponse1Count++;
}

void UCM::processGetSetpointsResponse(cea2045GetSetpointsResponse2 *message)
{
	getSetpointsResponse2Count++;
}

void UCM::processStartCyclingResponse(cea2045IntermediateResponse *message)
{
	startCyclingResponseCount++;
}

void UCM::processTerminateCyclingResponse(cea2045IntermediateResponse *message)
{
	startCyclingResponseCount++;
}

void UCM::processGetPresentTemperatureResponse(cea2045GetPresentTemperatureResponse *message)
{
	getPresentTemperatureResponseCount++;
}

void UCM::processGetUTCTimeResponse(cea2045GetUTCTimeResponse *message)
{
	getUTCTimeResponseCount++;
}

void UCM::processAckReceived(MessageCode messageCode)
{
	ackReceivedCount++;
}

void UCM::processNakReceived(LinkLayerNakCode nak, MessageCode messageCode)
{
	nakReceivedCount++;
}

void UCM::processAppAckReceived(cea2045::cea2045Basic* message)
{
	appAckReceivedCount++;
}

void UCM::processAppNakReceived(cea2045::cea2045Basic* message)
{
	appNakReceivedCount++;
}

void UCM::processAppCustomerOverride(cea2045::cea2045Basic* message)
{
}

void UCM::processIncompleteMessage(const unsigned char* buffer, unsigned int numBytes)
{
}

void cea2045test::processmessage::UCM::processOperationalStateReceived(
		cea2045Basic* message)
{
	operationalStateCount++;
}

} /* namespace processmessage */
} /* namespace test */


