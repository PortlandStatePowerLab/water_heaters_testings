// =====================================================================================
// Copyright (c) 2016, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// libcea2045 ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// #########################################################################################
// Boost Software License, Version 1.0
// #########################################################################################
//
// * catch++ v1.2.1 (https://github.com/philsquared/Catch)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// #########################################################################################
// MIT Licence
// #########################################################################################
//
// * easylogging++ Copyright (c) 2017 muflihun.com
//   https://github.com/easylogging/easyloggingpp
//   https://easylogging.muflihun.com
//   https://muflihun.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
/*
 * ProcessMessageUnitTest.cpp
 *
 *  Created on: Aug 25, 2015
 *      Author: dupes
 */

#include "../../catch.hpp"

#include "UCM.h"
#include "LinkLayerSendMock.h"

#include <cea2045/processmessage/ProcessMessageUCM.h>

//======================================================================================

using namespace cea2045;

//======================================================================================

SCENARIO("ProcessMessageUCM")
{
	cea2045test::processmessage::UCM ucm;
	ProcessMessageUCM processMessage(&ucm);
	LinkLayerSendMock send;

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("MESSAGE TYPE SUPPORTED")
	{
		cea2045MessageHeader message;

		message.msgType1 = 0x08;
		message.msgType2 = 0x01;

		processMessage.processMessageTypeSupported(&send, &message);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(ucm.messageTypeSupportedCount == 1);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.messageType == MessageTypeCode::BASIC);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("MESSAGE TYPE NOT SUPPORTED")
	{
		cea2045MessageHeader message;

		message.msgType1 = 0x08;
		message.msgType2 = 0x03;

		processMessage.processMessageTypeSupported(&send, &message);

		THEN("SHOULD SEND LINK LAYER NAK")
		{
			CHECK(ucm.messageTypeSupportedCount == 1);
			CHECK(send.sendNakCount == 1);
			CHECK(ucm.messageType == MessageTypeCode::DATALINK);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("MESSAGE CODE QUERY OPERATIONAL STATE")
	{
		cea2045Basic message;

		message.msgType1 = 0x08;
		message.msgType2 = 0x01;
		message.opCode1 = 0x13; // Query Response
		message.opCode2 = 0x00;

		processMessage.processBasicMessage(&send, &message);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.operationalStateCount == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("SET TEMPERATURE OFFSET RESPONSE")
	{
		cea2045IntermediateResponse message;
		cea2045MessageHeader *header = (cea2045MessageHeader *)&message;

		message.msgType1 = INTERMEDIATE_MSG_TYP1;
		message.msgType2 = INTERMEDIATE_MSG_TYP2;
		message.length = htobe16(3);
		message.opCode1 = GET_SET;
		message.opCode2 = 0x82;
		message.responseCode = 1;

		processMessage.processIntermediateMessage(&send, header);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.setTemperatureOffsetResponseCount == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("GET TEMPERATURE OFFSET RESPONSE")
	{
		cea2045GetTemperateOffsetResponse message;
		cea2045MessageHeader *header = (cea2045MessageHeader *)&message;

		message.msgType1 = INTERMEDIATE_MSG_TYP1;
		message.msgType2 = INTERMEDIATE_MSG_TYP2;
		message.setLength();
		message.opCode1 = GET_SET;
		message.opCode2 = 0x82;
		message.responseCode = 1;

		processMessage.processIntermediateMessage(&send, header);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.getTemperatureOffsetResponseCount == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("SET ENERGY PRICE RESPONSE")
	{
		cea2045IntermediateResponse message;
		cea2045MessageHeader *header = (cea2045MessageHeader *)&message;

		message.msgType1 = INTERMEDIATE_MSG_TYP1;
		message.msgType2 = INTERMEDIATE_MSG_TYP2;
		message.length = htobe16(3);
		message.opCode1 = GET_SET;
		message.opCode2 = 0x80;
		message.responseCode = 1;

		processMessage.processIntermediateMessage(&send, header);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.setEnergyPriceResponseCount == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("SET SETPOINT RESPONSE")
	{
		cea2045IntermediateResponse message;
		cea2045MessageHeader *header = (cea2045MessageHeader *)&message;

		message.msgType1 = INTERMEDIATE_MSG_TYP1;
		message.msgType2 = INTERMEDIATE_MSG_TYP2;
		message.length = htobe16(3);
		message.opCode1 = GET_SET;
		message.opCode2 = 0x83;
		message.responseCode = 1;

		processMessage.processIntermediateMessage(&send, header);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.setSetpointsResponseCount == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("GET SETPOINT RESPONSE1")
	{
		cea2045GetSetpointsResponse1 message;
		cea2045MessageHeader *header = (cea2045MessageHeader *)&message;

		message.msgType1 = INTERMEDIATE_MSG_TYP1;
		message.msgType2 = INTERMEDIATE_MSG_TYP2;
		message.setLength();
		message.opCode1 = GET_SET;
		message.opCode2 = 0x83;
		message.responseCode = 1;

		processMessage.processIntermediateMessage(&send, header);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.getSetpointsResponse1Count == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("GET SETPOINT RESPONSE2")
	{
		cea2045GetSetpointsResponse2 message;
		cea2045MessageHeader *header = (cea2045MessageHeader *)&message;

		message.msgType1 = INTERMEDIATE_MSG_TYP1;
		message.msgType2 = INTERMEDIATE_MSG_TYP2;
		message.setLength();
		message.opCode1 = GET_SET;
		message.opCode2 = 0x83;
		message.responseCode = 1;

		processMessage.processIntermediateMessage(&send, header);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.getSetpointsResponse2Count == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("SET START CYCLE RESPONSE")
	{
		cea2045IntermediateResponse message;
		cea2045MessageHeader *header = (cea2045MessageHeader *)&message;

		message.msgType1 = INTERMEDIATE_MSG_TYP1;
		message.msgType2 = INTERMEDIATE_MSG_TYP2;
		message.length = htobe16(3);
		message.opCode1 = AUTO_CYCLE;
		message.opCode2 = 0x80;
		message.responseCode = 1;

		processMessage.processIntermediateMessage(&send, header);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.startCyclingResponseCount == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("SET TERMINATE CYCLE RESPONSE")
	{
		cea2045IntermediateResponse message;
		cea2045MessageHeader *header = (cea2045MessageHeader *)&message;

		message.msgType1 = INTERMEDIATE_MSG_TYP1;
		message.msgType2 = INTERMEDIATE_MSG_TYP2;
		message.length = htobe16(3);
		message.opCode1 = AUTO_CYCLE;
		message.opCode2 = 0x81;
		message.responseCode = 1;

		processMessage.processIntermediateMessage(&send, header);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.startCyclingResponseCount == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("GET SETPOINT RESPONSE2")
	{
		cea2045GetPresentTemperatureResponse message;
		cea2045MessageHeader *header = (cea2045MessageHeader *)&message;

		message.msgType1 = INTERMEDIATE_MSG_TYP1;
		message.msgType2 = INTERMEDIATE_MSG_TYP2;
		message.setLength();
		message.opCode1 = GET_SET;
		message.opCode2 = 0x84;
		message.responseCode = 1;

		processMessage.processIntermediateMessage(&send, header);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.getPresentTemperatureResponseCount == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("GET UTC TIME REQUEST")
	{
		cea2045Intermediate message;
		cea2045MessageHeader *header = (cea2045MessageHeader *)&message;

		message.msgType1 = INTERMEDIATE_MSG_TYP1;
		message.msgType2 = INTERMEDIATE_MSG_TYP2;
		message.setLength();
		message.opCode1 = GET_UTC_TIME;
		message.opCode2 = CLEAR_OP_CODE2;
		message.setChecksum();

		processMessage.processIntermediateMessage(&send, header);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(send.sendResponseCount == 1);
			CHECK(ucm.getUTCTimeResponseCount == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("MESSAGE APP ACK RECEIVED")
	{
		cea2045Basic message;

		message.msgType1 = 0x08;
		message.msgType2 = 0x01;
		message.opCode1 = 0x03;
		message.opCode2 = 0x02;

		processMessage.processBasicMessage(&send, &message);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.appAckReceivedCount == 1);
		}
	}

	// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	WHEN("MESSAGE APP NAK RECEIVED")
	{
		cea2045Basic message;

		message.msgType1 = 0x08;
		message.msgType2 = 0x01;
		message.opCode1 = 0x04;
		message.opCode2 = 0x02;

		processMessage.processBasicMessage(&send, &message);

		THEN("SHOULD SEND LINK LAYER ACK")
		{
			CHECK(send.sendNakCount == 0);
			CHECK(send.sendAckCount == 1);
			CHECK(ucm.appNakReceivedCount == 1);
		}
	}
}
